/**
 * @param {number[]} piles
 * @param {number} h
 * @return {number}
 */
export var minEatingSpeed = function(piles, h) {
  let right = piles.reduce((a,b)=>a+b);
  let left = Math.ceil(right / h);
  while (left < right){
    const mid = left + Math.floor((right - left) / 2);
    const k = speed(piles,mid);
    // 如果吃的太快就应该缩小食量
    // 如果吃的刚好的话，就继续得减小食量，直到找到最小食量
    if(k <= h){
      right = mid;
    }else{
      // 如果吃的太慢，就应该增大食量
      left = mid + 1;
    }
  }
  return left;
};

/**
 * 一个小时吃x个，要多少个小时吃完
 * */
const speed = function (piles, x){
  let h = 0;
  // 循环整个吃完要多久
  for(let p of piles){
    // 看一下 p 要吃多少小时
    h += Math.floor(p / x);
    if(p % x > 0){
      // 不管剩多少，也只能再吃一个小时了
      h++;
    }
  }
  return h;
}

// console.log(minEatingSpeed([3,6,7,11],8));
// console.log(minEatingSpeed([34392671,891616382,813261297],712127987));

// console.log(minEatingSpeed([39349742,831289353,94850537,202034161,822483820,291480005,364718307,770576016,292917001,158974257,176779490,760021356,231880507,134164940,254947915,96989008,966910957,894767905,792919810,869260763,647220238,859344539,605456204,658422209,569973321,656339242,761737615,867843658,730633048,151226077,801884316,311330456,549743513,47760535,959446424,281582738,394416654,507455630,761654157,380907757,743234081,623056110,747328886,22109582,647024366,838123981,346932270,123795194,426587868,558806199,159727343,693528114,344036223,559859122,429821193,348971634,3091849,27424527,814018624,719679300,514700567,815327270,203518801,817418294,226395029,58054217,312644437,953205909,974835316,266039616,187830655,362467625,212023446,759856185,29858395,892618709,771251382,350458995,804946748,654101839,308468227,82459871,600937188,902889439,977038286,795037904,103459934,538278811,675744885,787296013,874459137],692180597));
